* squared_me.F
* this file is part of the process {MU, MD} -> {0, ME}
* generated by WriteSquaredME 7 Mar 2005 17:54

#include "prefix.h"
	subroutine squared_me(tree, loop, sqrtS,
     +    Hel1from, Hel1to, Hel2from, Hel2to, Hel3from, Hel3to,
     +    Hel4from, Hel4to, reset)
	implicit integer (j)
	implicit character (a-i,k-z)

	double precision tree, loop
	double precision sqrtS
	integer Hel1from, Hel1to, Hel2from, Hel2to, Hel3from, Hel3to
	integer Hel4from, Hel4to
	logical reset
#include "vars.h"
	double precision MomSquare, gwmw
        double complex mwcomplex,pureloop
	external MomSquare

	double complex c, m
	integer Cptr, Dptr
	double precision prevS,deltar
	save prevS
	data prevS /-1/

	common/resonant/mwcomplex
	common/deltaerre/deltar

cccc  COMMENTARE PER INTERFACCIA CON ORAZIO
cc	deltar = 0.0385531909
cc        deltar = 0.03855319091744685566780503904737997800111770629883d0
c	deltar = 0.0275267215d0
c        mwcomplex = dcmplx(mw,-gw/2.d0)
c	S = sqrtS**2
c	T = MomSquare(1,9)
c	U = MomSquare(1,13)
cccc
	gwmw=gw*mw

	if(reset .or. S .ne. prevS) then
	   call setcachelast(Ccache, 0)
	   call setcachelast(Dcache, 0)
	   call abbr_s
	   reset = .FALSE.
	   prevS = S
	endif
	Cptr = getcachelast(Ccache)
	Dptr = getcachelast(Dcache)
	
	call abbr_angle

	tree = 0
	loop = 0
	pureloop = (0.d0,0.d0)

	do 1 Hel1 = Hel1from, Hel1to
	   do 1 Hel2 = Hel2from, Hel2to
	      do 1 Hel3 = Hel3from, Hel3to
		 do 1 Hel4 = Hel4from, Hel4to

		    call abbr_hel		    
		    Ctree(1) = 0		    
		    do j5 = 1, 18
		       Cloop(j5) = (0.d0,0.d0)
		    enddo

		    call born		    
		    call box
		    do j5 = 1, 18
		       Cloop(j5) = Cloop(j5)*(s-mw2)/(s-mw2+dcmplx(0d0,gwmw))
		    enddo
		    
		    call sself
        	    call vert
		    call cts
		    
		    c = dconjg(Ctree(1))
		    
		    m = 0
		    m = m + Ctree(1)*MatF(1,1)
		    tree = tree + dble(c*m)

		    m = 0
		    do j5 = 1, 18
		       m = m + Cloop(j5)*MatF(j5,1)
		    enddo
		    loop = loop + 2*dble(c*m)

		    pureloop = pureloop + c*m

 1		 continue
        call setcachelast(Ccache, Cptr)
        call setcachelast(Dcache, Dptr)
	end
