* renconst.F
* this file contains renormalization constants
* generated by WriteRenConst 7 Mar 2005 17:55

#include "prefix.h"
	subroutine calc_renconst
	implicit character (a-s,u-z)
	implicit double complex (t)

	double complex dze1new,dswnew,dzwnew,dzf1,dzf2,dzf3,dzf4,dmw2
	common/newct/dze1new,dswnew,dzwnew,dzf1,dzf2,dzf3,dzf4,dmw2

	double precision ME2f, 
     . MM2f,
     . ML2f,
     . MU2f,
     . MD2f,
     . MC2f,
     . MS2f,
     . MB2f,
     . MT2f
	integer ifirst,k
	common/calcrenconstifirst/ifirst
	data ifirst/1/
#include "model.h"
#include "looptools.h"
#include "renconst.h"

*-------PER INTERFACCIA CON ORAZIO...
	SW = sqrt(SW2)
	ckm(1,1) = 1.d0
	ckm(2,2) = 1.d0
	ckm(3,3) = 1.d0
	ckm(1,2) = 0.d0
	ckm(1,3) = 0.d0
	ckm(2,1) = 0.d0
	ckm(2,3) = 0.d0
	ckm(3,1) = 0.d0
	ckm(3,2) = 0.d0
      
c      ckmc(1,1) = 1.d0
c      ckmc(2,2) = 1.d0
c      ckmc(3,3) = 1.d0
c      ckmc(1,2) = 0.d0
c      ckmc(1,3) = 0.d0
c      ckmc(2,1) = 0.d0
c      ckmc(2,3) = 0.d0
c      ckmc(3,1) = 0.d0
c      ckmc(3,2) = 0.d0
c	print*,'MASSES: ',me,mm,ml,mu,md,mc,ms,mt,mb,mw,mz,mh
c	print*,'PARAMETERS',alfa,sw2,cw2,sw
c	print*,mqu,mqd,mle
c	stop
*--------------------------------

        dMWsq1 = -(Alfa*MW2)/(6.D0*Pi*SW2) - 
     -   (3*Alfa)/(4.D0*Pi*SW2)*(CKM(3,3)*CKMC(3,3)*dble(A0(MB2))) - 
     -   (3*Alfa)/(4.D0*Pi*SW2)*(CKM(1,1)*CKMC(1,1)*dble(A0(MD2))) - 
     -   Alfa/(4.D0*Pi*SW2)*dble(A0(ME2)) + 
     -   Alfa/(16.D0*Pi*SW2)*dble(A0(MH2)) - 
     -   Alfa/(4.D0*Pi*SW2)*dble(A0(ML2)) - 
     -   Alfa/(4.D0*Pi*SW2)*dble(A0(MM2)) - 
     -   (3*Alfa)/(4.D0*Pi*SW2)*(CKM(2,2)*CKMC(2,2)*dble(A0(MS2))) - 
     -   (Alfa*(-7 + 4*CW2 + 4*SW2))/(8.D0*Pi*SW2)*dble(A0(MW2)) + 
     -   (Alfa + 12*Alfa*CW2)/(16.D0*Pi*SW2)*dble(A0(MZ2)) - 
     -   (Alfa*MW2)/Pi*dble(B0(MW2,0.D0,MW2)) - 
     -   (3*Alfa*MT2)/(4.D0*Pi*SW2)*
     -    (CKM(3,3)*CKMC(3,3)*dble(B0(MW2,MB2,MT2))) - 
     -   (3*Alfa*MC2)/(4.D0*Pi*SW2)*
     -    (CKM(2,2)*CKMC(2,2)*dble(B0(MW2,MC2,MS2))) - 
     -   (3*Alfa*MU2)/(4.D0*Pi*SW2)*
     -    (CKM(1,1)*CKMC(1,1)*dble(B0(MW2,MD2,MU2))) + 
     -   (Alfa*MW2)/(4.D0*Pi*SW2)*dble(B0(MW2,MH2,MW2)) + 
     -   (Alfa*(-(CW2**2*(5*MW2 + 2*MZ2)) + MW2*SW2**2))/
     -     (4.D0*CW2*Pi*SW2)*dble(B0(MW2,MW2,MZ2)) + 
     -   Alfa/(2.D0*Pi*SW2)*dble(B00(MW2,0.D0,ME2)) + 
     -   Alfa/(2.D0*Pi*SW2)*dble(B00(MW2,0.D0,ML2)) + 
     -   Alfa/(2.D0*Pi*SW2)*dble(B00(MW2,0.D0,MM2)) - 
     -   (2*Alfa)/Pi*dble(B00(MW2,0.D0,MW2)) + 
     -   (3*Alfa)/(2.D0*Pi*SW2)*
     -    (CKM(2,2)*CKMC(2,2)*dble(B00(MW2,MC2,MS2))) - 
     -   Alfa/(4.D0*Pi*SW2)*dble(B00(MW2,MH2,MW2)) + 
     -   (3*Alfa)/(2.D0*Pi*SW2)*
     -    (CKM(3,3)*CKMC(3,3)*dble(B00(MW2,MT2,MB2))) + 
     -   (3*Alfa)/(2.D0*Pi*SW2)*
     -    (CKM(1,1)*CKMC(1,1)*dble(B00(MW2,MU2,MD2))) - 
     -   (Alfa + 8*Alfa*CW2)/(4.D0*Pi*SW2)*dble(B00(MW2,MZ2,MW2)) - 
     -   (Alfa*MW2)/(4.D0*Pi*SW2)*dble(B1(MW2,0.D0,ME2)) - 
     -   (Alfa*MW2)/(4.D0*Pi*SW2)*dble(B1(MW2,0.D0,ML2)) - 
     -   (Alfa*MW2)/(4.D0*Pi*SW2)*dble(B1(MW2,0.D0,MM2)) - 
     -   (Alfa*MW2)/(2.D0*Pi)*dble(B1(MW2,0.D0,MW2)) - 
     -   (3*Alfa*MW2)/(4.D0*Pi*SW2)*
     -    (CKM(2,2)*CKMC(2,2)*dble(B1(MW2,MC2,MS2))) - 
     -   (3*Alfa*MW2)/(4.D0*Pi*SW2)*
     -    (CKM(3,3)*CKMC(3,3)*dble(B1(MW2,MT2,MB2))) - 
     -   (3*Alfa*MW2)/(4.D0*Pi*SW2)*
     -    (CKM(1,1)*CKMC(1,1)*dble(B1(MW2,MU2,MD2))) - 
     -   (Alfa*CW2*MW2)/(2.D0*Pi*SW2)*dble(B1(MW2,MZ2,MW2))

#ifdef DEBUG
	print *, 'dMWsq1 =', dMWsq1
	print*, mw2,mz2,mh2,Alfa,sw2,cw2
	print*, me2,mm2,ml2,mu2,md2,mc2,ms2,mt2,mb2
#endif

        dMZsq1 = -(Alfa*CW2*MZ2)/(6.D0*Pi*SW2) - 
     -   (Alfa*(9 - 12*SW2 + 8*SW2**2))/(24.D0*CW2*Pi*SW2)*
     -    dble(A0(MB2)) - (Alfa*(9 - 24*SW2 + 32*SW2**2))/
     -     (24.D0*CW2*Pi*SW2)*dble(A0(MC2)) - 
     -   (Alfa*(9 - 12*SW2 + 8*SW2**2))/(24.D0*CW2*Pi*SW2)*
     -    dble(A0(MD2)) - (Alfa*(1 - 4*SW2 + 8*SW2**2))/
     -     (8.D0*CW2*Pi*SW2)*dble(A0(ME2)) + 
     -   Alfa/(16.D0*CW2*Pi*SW2)*dble(A0(MH2)) - 
     -   (Alfa*(1 - 4*SW2 + 8*SW2**2))/(8.D0*CW2*Pi*SW2)*
     -    dble(A0(ML2)) - (Alfa*(1 - 4*SW2 + 8*SW2**2))/
     -     (8.D0*CW2*Pi*SW2)*dble(A0(MM2)) - 
     -   (Alfa*(9 - 12*SW2 + 8*SW2**2))/(24.D0*CW2*Pi*SW2)*
     -    dble(A0(MS2)) - (Alfa*(9 - 24*SW2 + 32*SW2**2))/
     -     (24.D0*CW2*Pi*SW2)*dble(A0(MT2)) - 
     -   (Alfa*(9 - 24*SW2 + 32*SW2**2))/(24.D0*CW2*Pi*SW2)*
     -    dble(A0(MU2)) + (Alfa*(9*CW2**2 - 2*CW2*SW2 + SW2**2))/
     -     (8.D0*CW2*Pi*SW2)*dble(A0(MW2)) + 
     -   Alfa/(16.D0*CW2*Pi*SW2)*dble(A0(MZ2)) - 
     -   (3*Alfa*MB2)/(8.D0*CW2*Pi*SW2)*dble(B0(MZ2,MB2,MB2)) - 
     -   (3*Alfa*MC2)/(8.D0*CW2*Pi*SW2)*dble(B0(MZ2,MC2,MC2)) - 
     -   (3*Alfa*MD2)/(8.D0*CW2*Pi*SW2)*dble(B0(MZ2,MD2,MD2)) - 
     -   (Alfa*ME2)/(8.D0*CW2*Pi*SW2)*dble(B0(MZ2,ME2,ME2)) + 
     -   (Alfa*MW2)/(4.D0*CW2**2*Pi*SW2)*dble(B0(MZ2,MH2,MZ2)) - 
     -   (Alfa*ML2)/(8.D0*CW2*Pi*SW2)*dble(B0(MZ2,ML2,ML2)) - 
     -   (Alfa*MM2)/(8.D0*CW2*Pi*SW2)*dble(B0(MZ2,MM2,MM2)) - 
     -   (3*Alfa*MS2)/(8.D0*CW2*Pi*SW2)*dble(B0(MZ2,MS2,MS2)) - 
     -   (3*Alfa*MT2)/(8.D0*CW2*Pi*SW2)*dble(B0(MZ2,MT2,MT2)) - 
     -   (3*Alfa*MU2)/(8.D0*CW2*Pi*SW2)*dble(B0(MZ2,MU2,MU2)) + 
     -   (Alfa*(-(CW2**2*(2*MW2 + 5*MZ2)) + 2*MW2*SW2**2))/
     -     (4.D0*CW2*Pi*SW2)*dble(B0(MZ2,MW2,MW2)) + 
     -   (3*Alfa)/(4.D0*CW2*Pi*SW2)*dble(B00(MZ2,0.D0,0.D0)) + 
     -   (Alfa*(9 - 12*SW2 + 8*SW2**2))/(12.D0*CW2*Pi*SW2)*
     -    dble(B00(MZ2,MB2,MB2)) + 
     -   (Alfa*(9 - 24*SW2 + 32*SW2**2))/(12.D0*CW2*Pi*SW2)*
     -    dble(B00(MZ2,MC2,MC2)) + 
     -   (Alfa*(9 - 12*SW2 + 8*SW2**2))/(12.D0*CW2*Pi*SW2)*
     -    dble(B00(MZ2,MD2,MD2))
        dMZsq1 = dMZsq1 + 
     -   (Alfa*(1 - 4*SW2 + 8*SW2**2))/(4.D0*CW2*Pi*SW2)*
     -    dble(B00(MZ2,ME2,ME2)) - 
     -   Alfa/(4.D0*CW2*Pi*SW2)*dble(B00(MZ2,MH2,MZ2)) + 
     -   (Alfa*(1 - 4*SW2 + 8*SW2**2))/(4.D0*CW2*Pi*SW2)*
     -    dble(B00(MZ2,ML2,ML2)) + 
     -   (Alfa*(1 - 4*SW2 + 8*SW2**2))/(4.D0*CW2*Pi*SW2)*
     -    dble(B00(MZ2,MM2,MM2)) + 
     -   (Alfa*(9 - 12*SW2 + 8*SW2**2))/(12.D0*CW2*Pi*SW2)*
     -    dble(B00(MZ2,MS2,MS2)) + 
     -   (Alfa*(9 - 24*SW2 + 32*SW2**2))/(12.D0*CW2*Pi*SW2)*
     -    dble(B00(MZ2,MT2,MT2)) + 
     -   (Alfa*(9 - 24*SW2 + 32*SW2**2))/(12.D0*CW2*Pi*SW2)*
     -    dble(B00(MZ2,MU2,MU2)) - 
     -   (Alfa*(9*CW2**2 - 2*CW2*SW2 + SW2**2))/(4.D0*CW2*Pi*SW2)*
     -    dble(B00(MZ2,MW2,MW2)) - 
     -   (3*Alfa*MZ2)/(8.D0*CW2*Pi*SW2)*dble(B1(MZ2,0.D0,0.D0)) - 
     -   (Alfa*MZ2*(9 - 12*SW2 + 8*SW2**2))/(24.D0*CW2*Pi*SW2)*
     -    dble(B1(MZ2,MB2,MB2)) - 
     -   (Alfa*MZ2*(9 - 24*SW2 + 32*SW2**2))/(24.D0*CW2*Pi*SW2)*
     -    dble(B1(MZ2,MC2,MC2)) - 
     -   (Alfa*MZ2*(9 - 12*SW2 + 8*SW2**2))/(24.D0*CW2*Pi*SW2)*
     -    dble(B1(MZ2,MD2,MD2)) - 
     -   (Alfa*MZ2*(1 - 4*SW2 + 8*SW2**2))/(8.D0*CW2*Pi*SW2)*
     -    dble(B1(MZ2,ME2,ME2)) - 
     -   (Alfa*MZ2*(1 - 4*SW2 + 8*SW2**2))/(8.D0*CW2*Pi*SW2)*
     -    dble(B1(MZ2,ML2,ML2)) - 
     -   (Alfa*MZ2*(1 - 4*SW2 + 8*SW2**2))/(8.D0*CW2*Pi*SW2)*
     -    dble(B1(MZ2,MM2,MM2)) - 
     -   (Alfa*MZ2*(9 - 12*SW2 + 8*SW2**2))/(24.D0*CW2*Pi*SW2)*
     -    dble(B1(MZ2,MS2,MS2)) - 
     -   (Alfa*MZ2*(9 - 24*SW2 + 32*SW2**2))/(24.D0*CW2*Pi*SW2)*
     -    dble(B1(MZ2,MT2,MT2)) - 
     -   (Alfa*MZ2*(9 - 24*SW2 + 32*SW2**2))/(24.D0*CW2*Pi*SW2)*
     -    dble(B1(MZ2,MU2,MU2)) - 
     -   (Alfa*CW2*MZ2)/(2.D0*Pi*SW2)*dble(B1(MZ2,MW2,MW2))

#ifdef DEBUG
	print *, 'dMZsq1 =', dMZsq1
#endif

	dSW1 = CW2/2.D0*(-(1/MW2*dMWsq1) + 1/MZ2*dMZsq1)/SW

#ifdef DEBUG
	print *, 'dSW1 =', dSW1
#endif

        dZW1 = Alfa/(6.D0*Pi*SW2) + 
     -   (5*Alfa)/(4.D0*Pi)*dble(B0(MW2,0.D0,MW2)) + 
     -   (5*Alfa*CW2)/(4.D0*Pi*SW2)*dble(B0(MW2,MW2,MZ2)) + 
     -   Alfa/(4.D0*Pi*SW2)*dble(B1(MW2,0.D0,ME2)) + 
     -   Alfa/(4.D0*Pi*SW2)*dble(B1(MW2,0.D0,ML2)) + 
     -   Alfa/(4.D0*Pi*SW2)*dble(B1(MW2,0.D0,MM2)) + 
     -   Alfa/(2.D0*Pi)*dble(B1(MW2,0.D0,MW2)) + 
     -   (3*Alfa)/(4.D0*Pi*SW2)*
     -    (CKM(2,2)*CKMC(2,2)*dble(B1(MW2,MC2,MS2))) + 
     -   (3*Alfa)/(4.D0*Pi*SW2)*
     -    (CKM(3,3)*CKMC(3,3)*dble(B1(MW2,MT2,MB2))) + 
     -   (3*Alfa)/(4.D0*Pi*SW2)*
     -    (CKM(1,1)*CKMC(1,1)*dble(B1(MW2,MU2,MD2))) + 
     -   (Alfa*CW2)/(2.D0*Pi*SW2)*dble(B1(MW2,MZ2,MW2)) + 
     -   (Alfa*MW2)/Pi*dble(DB0(MW2,0.D0,MW2)) + 
     -   (3*Alfa*MT2)/(4.D0*Pi*SW2)*
     -    (CKM(3,3)*CKMC(3,3)*dble(DB0(MW2,MB2,MT2))) + 
     -   (3*Alfa*MC2)/(4.D0*Pi*SW2)*
     -    (CKM(2,2)*CKMC(2,2)*dble(DB0(MW2,MC2,MS2))) + 
     -   (3*Alfa*MU2)/(4.D0*Pi*SW2)*
     -    (CKM(1,1)*CKMC(1,1)*dble(DB0(MW2,MD2,MU2))) - 
     -   (Alfa*MW2)/(4.D0*Pi*SW2)*dble(DB0(MW2,MH2,MW2)) + 
     -   (Alfa*(CW2**2*(5*MW2 + 2*MZ2) - MW2*SW2**2))/
     -     (4.D0*CW2*Pi*SW2)*dble(DB0(MW2,MW2,MZ2)) - 
     -   Alfa/(2.D0*Pi*SW2)*dble(DB00(MW2,0.D0,ME2)) - 
     -   Alfa/(2.D0*Pi*SW2)*dble(DB00(MW2,0.D0,ML2)) - 
     -   Alfa/(2.D0*Pi*SW2)*dble(DB00(MW2,0.D0,MM2)) + 
     -   (2*Alfa)/Pi*dble(DB00(MW2,0.D0,MW2)) - 
     -   (3*Alfa)/(2.D0*Pi*SW2)*
     -    (CKM(2,2)*CKMC(2,2)*dble(DB00(MW2,MC2,MS2))) + 
     -   Alfa/(4.D0*Pi*SW2)*dble(DB00(MW2,MH2,MW2)) - 
     -   (3*Alfa)/(2.D0*Pi*SW2)*
     -    (CKM(3,3)*CKMC(3,3)*dble(DB00(MW2,MT2,MB2))) - 
     -   (3*Alfa)/(2.D0*Pi*SW2)*
     -    (CKM(1,1)*CKMC(1,1)*dble(DB00(MW2,MU2,MD2))) + 
     -   (Alfa + 8*Alfa*CW2)/(4.D0*Pi*SW2)*dble(DB00(MW2,MZ2,MW2)) + 
     -   (Alfa*MW2)/(4.D0*Pi*SW2)*dble(DB1(MW2,0.D0,ME2)) + 
     -   (Alfa*MW2)/(4.D0*Pi*SW2)*dble(DB1(MW2,0.D0,ML2)) + 
     -   (Alfa*MW2)/(4.D0*Pi*SW2)*dble(DB1(MW2,0.D0,MM2)) + 
     -   (Alfa*MW2)/(2.D0*Pi)*dble(DB1(MW2,0.D0,MW2)) + 
     -   (3*Alfa*MW2)/(4.D0*Pi*SW2)*
     -    (CKM(2,2)*CKMC(2,2)*dble(DB1(MW2,MC2,MS2))) + 
     -   (3*Alfa*MW2)/(4.D0*Pi*SW2)*
     -    (CKM(3,3)*CKMC(3,3)*dble(DB1(MW2,MT2,MB2))) + 
     -   (3*Alfa*MW2)/(4.D0*Pi*SW2)*
     -    (CKM(1,1)*CKMC(1,1)*dble(DB1(MW2,MU2,MD2))) + 
     -   (Alfa*CW2*MW2)/(2.D0*Pi*SW2)*dble(DB1(MW2,MZ2,MW2))

#ifdef DEBUG
	print *, 'dZW1 =', dZW1
#endif

*=====================================================
*=====================================================
*=====================================================
*--- in dzaa1 e dzza1 voglio la possibilita' di fissare le masse dei
*--- quarks e dei leptoni, per verificare l'indipendenza dalle masse....
c	if (ifirst.eq.1) then
c	   do k = 1,10
c	      print*,' MU AND MD FIXED AT 0.066d0 GEV IN dZe1 !'
c	   enddo
c	   ifirst = 0
c	endif

	ME2f = ME2 
	MM2f = MM2
	ML2f = ML2

	MU2f = MU2
	MD2f = MD2
c	MU2f = (66d-3)**2
c	MD2f = (66d-3)**2
	
	MC2f = MC2
	MS2f = MS2
	MB2f = MB2
	MT2f = MT2

        dZAA1 = Alfa/(6.D0*Pi) + 
     -   (5*Alfa)/(4.D0*Pi)*dble(B0(0.D0,MW2,MW2)) + 
     -   Alfa/(3.D0*Pi)*dble(B1(0.D0,MB2f,MB2f)) + 
     -   (4*Alfa)/(3.D0*Pi)*dble(B1(0.D0,MC2f,MC2f)) + 
     -   Alfa/(3.D0*Pi)*dble(B1(0.D0,MD2f,MD2f)) + 
     -   Alfa/Pi*dble(B1(0.D0,ME2f,ME2f)) + 
     -   Alfa/Pi*dble(B1(0.D0,ML2f,ML2f)) + 
     -   Alfa/Pi*dble(B1(0.D0,MM2f,MM2f)) + 
     -   Alfa/(3.D0*Pi)*dble(B1(0.D0,MS2f,MS2f)) + 
     -   (4*Alfa)/(3.D0*Pi)*dble(B1(0.D0,MT2f,MT2f)) + 
     -   (4*Alfa)/(3.D0*Pi)*dble(B1(0.D0,MU2f,MU2f)) + 
     -   Alfa/(2.D0*Pi)*dble(B1(0.D0,MW2,MW2)) - 
     -   (2*Alfa)/(3.D0*Pi)*dble(DB00(0.D0,MB2f,MB2f)) - 
     -   (8*Alfa)/(3.D0*Pi)*dble(DB00(0.D0,MC2f,MC2f)) - 
     -   (2*Alfa)/(3.D0*Pi)*dble(DB00(0.D0,MD2f,MD2f)) - 
     -   (2*Alfa)/Pi*dble(DB00(0.D0,ME2f,ME2f)) - 
     -   (2*Alfa)/Pi*dble(DB00(0.D0,ML2f,ML2f)) - 
     -   (2*Alfa)/Pi*dble(DB00(0.D0,MM2f,MM2f)) - 
     -   (2*Alfa)/(3.D0*Pi)*dble(DB00(0.D0,MS2f,MS2f)) - 
     -   (8*Alfa)/(3.D0*Pi)*dble(DB00(0.D0,MT2f,MT2f)) - 
     -   (8*Alfa)/(3.D0*Pi)*dble(DB00(0.D0,MU2f,MU2f)) + 
     -   (3*Alfa)/Pi*dble(DB00(0.D0,MW2,MW2))

#ifdef DEBUG
	print *, 'dZAA1 =', dZAA1
#endif

        dZZA1 = -(2/MZ2*((Alfa*(-3 + 4*SW2))/(12.D0*CW*Pi)*
     -        dble(A0(MB2))/SW + 
     -       (Alfa*(-3 + 8*SW2))/(6.D0*CW*Pi)*dble(A0(MC2f))/SW + 
     -       (Alfa*(-3 + 4*SW2))/(12.D0*CW*Pi)*dble(A0(MD2f))/SW + 
     -       (Alfa*(-1 + 4*SW2))/(4.D0*CW*Pi)*dble(A0(ME2f))/SW + 
     -       (Alfa*(-1 + 4*SW2))/(4.D0*CW*Pi)*dble(A0(ML2f))/SW + 
     -       (Alfa*(-1 + 4*SW2))/(4.D0*CW*Pi)*dble(A0(MM2f))/SW + 
     -       (Alfa*(-3 + 4*SW2))/(12.D0*CW*Pi)*dble(A0(MS2f))/SW + 
     -       (Alfa*(-3 + 8*SW2))/(6.D0*CW*Pi)*dble(A0(MT2f))/SW + 
     -       (Alfa*(-3 + 8*SW2))/(6.D0*CW*Pi)*dble(A0(MU2f))/SW + 
     -       (Alfa*(5*CW2 - SW2))/(4.D0*CW*Pi)*dble(A0(MW2))/SW - 
     -       (Alfa*MW2)/(2.D0*CW*Pi)*dble(B0(0.D0,MW2,MW2))/SW + 
     -       (Alfa*(3 - 4*SW2))/(6.D0*CW*Pi)*
     -        dble(B00(0.D0,MB2f,MB2f))/SW + 
     -       (Alfa*(3 - 8*SW2))/(3.D0*CW*Pi)*
     -        dble(B00(0.D0,MC2f,MC2f))/SW + 
     -       (Alfa*(3 - 4*SW2))/(6.D0*CW*Pi)*
     -        dble(B00(0.D0,MD2f,MD2f))/SW + 
     -       (Alfa - 4*Alfa*SW2)/(2.D0*CW*Pi)*
     -        dble(B00(0.D0,ME2f,ME2f))/SW + 
     -       (Alfa - 4*Alfa*SW2)/(2.D0*CW*Pi)*
     -        dble(B00(0.D0,ML2f,ML2f))/SW + 
     -       (Alfa - 4*Alfa*SW2)/(2.D0*CW*Pi)*
     -        dble(B00(0.D0,MM2f,MM2f))/SW + 
     -       (Alfa*(3 - 4*SW2))/(6.D0*CW*Pi)*
     -        dble(B00(0.D0,MS2f,MS2f))/SW + 
     -       (Alfa*(3 - 8*SW2))/(3.D0*CW*Pi)*
     -        dble(B00(0.D0,MT2f,MT2f))/SW + 
     -       (Alfa*(3 - 8*SW2))/(3.D0*CW*Pi)*
     -        dble(B00(0.D0,MU2f,MU2f))/SW + 
     -       (Alfa*(-5*CW2 + SW2))/(2.D0*CW*Pi)*
     -        dble(B00(0.D0,MW2,MW2))/SW))

#ifdef DEBUG
	print *, 'dZZA1 =', dZZA1
#endif
*=====================================================
*=====================================================
*=====================================================

        dZfL1(1,1,1) = (Alfa + 2*Alfa*CW2)/(16.D0*CW2*Pi*SW2) + 
     -   Alfa/(8.D0*CW2*Pi*SW2)*dble(B1(0.D0,0.D0,MZ2)) + 
     -   Alfa/(4.D0*Pi*SW2)*dble(B1(0.D0,ME2,MW2))

#ifdef DEBUG
	print *, 'dZfL1(1,1,1) =', dZfL1(1,1,1)
#endif

        dZfL1(2,1,1) = (Alfa*((1 - 2*SW2)**2 + CW2*(2 + 4*SW2)))/
     -    (16.D0*CW2*Pi*SW2) + 
     -   Alfa/(4.D0*Pi*SW2)*dble(B1(ME2,0.D0,MW2)) + 
     -   Alfa/(2.D0*Pi)*dble(B1(ME2,ME2,0.D0)) + 
     -   (Alfa*(1 - 2*SW2)**2)/(8.D0*CW2*Pi*SW2)*
     -    dble(B1(ME2,ME2,MZ2)) + 
     -   (2*Alfa*ME2)/Pi*dble(DB0(ME2,0.D0,ME2)) + 
     -   (Alfa*ME2*(-1 + 2*SW2))/(CW2*Pi)*dble(DB0(ME2,ME2,MZ2)) + 
     -   (Alfa*ME2)/(4.D0*Pi*SW2)*dble(DB1(ME2,0.D0,MW2)) + 
     -   (Alfa*ME2)/Pi*dble(DB1(ME2,ME2,0.D0)) + 
     -   (Alfa*ME2*(1 - 4*SW2 + 8*SW2**2))/(8.D0*CW2*Pi*SW2)*
     -    dble(DB1(ME2,ME2,MZ2))

#ifdef DEBUG
	print *, 'dZfL1(2,1,1) =', dZfL1(2,1,1)
#endif

        dZfL1(3,1,1) = Alfa/(4.D0*Pi*SW2)*
     -    (CKM(1,1)*CKMC(1,1)*dble(B1(MU2,MD2,MW2))) + 
     -   (2*Alfa)/(9.D0*Pi)*dble(B1(MU2,MU2,0.D0)) + 
     -   (Alfa*(3 - 4*SW2)**2)/(72.D0*CW2*Pi*SW2)*
     -    dble(B1(MU2,MU2,MZ2)) + 
     -   (8*Alfa*MU2)/(9.D0*Pi)*dble(DB0(MU2,0.D0,MU2)) + 
     -   (2*Alfa*MU2*(-3 + 4*SW2))/(9.D0*CW2*Pi)*
     -    dble(DB0(MU2,MU2,MZ2)) + 
     -   (Alfa*MU2)/(4.D0*Pi*SW2)*
     -    (CKM(1,1)*CKMC(1,1)*dble(DB1(MU2,MD2,MW2))) + 
     -   (4*Alfa*MU2)/(9.D0*Pi)*dble(DB1(MU2,MU2,0.D0)) + 
     -   (Alfa*MU2*(9 - 24*SW2 + 32*SW2**2))/(72.D0*CW2*Pi*SW2)*
     -    dble(DB1(MU2,MU2,MZ2)) + 
     -   Alfa/(144.D0*CW2*Pi*SW2)*
     -    (9 + 8*(-3 + 2*CW2)*SW2 + 16*SW2**2 + 
     -      18*CW2*(CKM(1,1)*CKMC(1,1)))

#ifdef DEBUG
	print *, 'dZfL1(3,1,1) =', dZfL1(3,1,1)
#endif

        dZfL1(4,1,1) = Alfa/(18.D0*Pi)*dble(B1(MD2,MD2,0.D0)) + 
     -   (Alfa*(3 - 2*SW2)**2)/(72.D0*CW2*Pi*SW2)*
     -    dble(B1(MD2,MD2,MZ2)) + 
     -   Alfa/(4.D0*Pi*SW2)*(CKM(1,1)*CKMC(1,1)*
     -      dble(B1(MD2,MU2,MW2))) + 
     -   (2*Alfa*MD2)/(9.D0*Pi)*dble(DB0(MD2,0.D0,MD2)) + 
     -   (Alfa*MD2*(-3 + 2*SW2))/(9.D0*CW2*Pi)*
     -    dble(DB0(MD2,MD2,MZ2)) + 
     -   (Alfa*MD2)/(9.D0*Pi)*dble(DB1(MD2,MD2,0.D0)) + 
     -   (Alfa*MD2*(9 - 12*SW2 + 8*SW2**2))/(72.D0*CW2*Pi*SW2)*
     -    dble(DB1(MD2,MD2,MZ2)) + 
     -   (Alfa*MD2)/(4.D0*Pi*SW2)*
     -    (CKM(1,1)*CKMC(1,1)*dble(DB1(MD2,MU2,MW2))) + 
     -   Alfa/(144.D0*CW2*Pi*SW2)*
     -    (9 + 4*(-3 + CW2)*SW2 + 4*SW2**2 + 
     -      18*CW2*(CKM(1,1)*CKMC(1,1)))

#ifdef DEBUG
	print *, 'dZfL1(4,1,1) =', dZfL1(4,1,1)
#endif

	dZe1 = 0.5D0*(-dZAA1 - 1/CW*(dZZA1*SW))
	
c	print*,dZe1
c	stop

#ifdef DEBUG
	print *, 'dZe1 =', dZe1
#endif

ccc	dze1 = 0.d0
        dze1new = dze1
        dswnew = dsw1
        dzwnew = dzw1
	dzf1 = dzfl1(1,1,1)
	dzf2 = dzfl1(2,1,1)
	dzf3 = dzfl1(3,1,1)
	dzf4 = dzfl1(4,1,1)
        dmw2 = dMWsq1

#ifdef DEBUG
	print*,'-------------------'
	print*,'print in renconst.F'
	print*,dze1new,dswnew,dzf1,dzf2,dzf3,dzf4,dmw2
	print*,1.d0/Alfa
	print*,'-------------------'
#endif
	end

